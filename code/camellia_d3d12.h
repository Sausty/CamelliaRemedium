#ifndef CAMELLIA_D3D12_H
#define CAMELLIA_D3D12_H

#include <d3d12.h>
#include <dxgi1_6.h>
#include <d3d12shader.h>
#include <Windows.Graphics.Holographic.Interop.h>

// NOTE(milo.h): I wrote this entire file by hand. I am close to insanity.

//~ NOTE(milo.h): ID3D12CommandAllocator
#define ID3D12CommandAllocator_Reset(c) c->lpVtbl->Reset(c)
#define ID3D12CommandAllocator_GetPrivateData(c, guid, pDataSize, pData) c->lpVtbl->GetPrivateData(c, guid, pDataSize, pData)
#define ID3D12CommandAllocator_SetName(c, Name) c->lpVtbl->SetName(c, Name)
#define ID3D12CommandAllocator_SetPrivateData(c, guid, DataSize, pData) c->lpVtbl->SetPrivateData(c, guid, DataSize, pData)
#define ID3D12CommandAllocator_SetPrivateDataInterface(c, guid, pData) c->lpVtbl->SetPrivateDataInterface(c, guid, pData)
#define ID3D12CommandAllocator_AddRef(c) c->lpVtbl->AddRef(c)
#define ID3D12CommandAllocator_QueryInterface(c, riid, ppvObject) c->lpVtbl->QueryInterface(c, riid, ppvObject)
#define ID3D12CommandAllocator_Release(c) c->lpVtbl->Release(c)
#define ID3D12CommandAllocator_GetDevice(c, riid, ppvDevice) c->lpVtbl->GetDevice(c, riid, ppvDevice)

//~ NOTE(milo.h): ID3D12CommandList
#define ID3D12CommandList_GetType(c) c->lpVtbl->GetType(c)
#define ID3D12CommandList_GetPrivateData(c, guid, pDataSize, pData) c->lpVtbl->GetPrivateData(c, guid, pDataSize, pData)
#define ID3D12CommandList_SetName(c, Name) c->lpVtbl->SetName(c, Name)
#define ID3D12CommandList_SetPrivateData(c, guid, DataSize, pData) c->lpVtbl->SetPrivateData(c, guid, DataSize, pData)
#define ID3D12CommandList_SetPrivateDataInterface(c, guid, pData) c->lpVtbl->SetPrivateDataInterface(c, guid, pData)
#define ID3D12CommandList_AddRef(c) c->lpVtbl->AddRef(c)
#define ID3D12CommandList_QueryInterface(c, riid, ppvObject) c->lpVtbl->QueryInterface(c, riid, ppvObject)
#define ID3D12CommandList_Release(c) c->lpVtbl->Release(c)
#define ID3D12CommandList_GetDevice(c, riid, ppvDevice) c->lpVtbl->GetDevice(c, riid, ppvDevice)

//~ NOTE(milo.h): ID3D12CommandQueue
#define ID3D12CommandQueue_BeginEvent(c, Metadata, pData, Size) c->lpVtbl->BeginEvent(c, Metadata, pData, Size)
#define ID3D12CommandQueue_CopyTileMappings(c, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinatepRegionSize, Flags) c->lpVtbl->CopyTileMappings(c, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate)
#define ID3D12CommandQueue_EndEvent(c) c->lpVtbl->EndEvent(c)
#define ID3D12CommandQueue_ExecuteCommandLists(c, NumCommandLists, ppCommandLists) c->lpVtbl->ExecuteCommandLists(c, NumCommandLists, ppCommandLists)
#define ID3D12CommandQueue_GetClockCalibration(c, pGpuTimestamp, pCpuTimestamp) c->lpVtbl->GetClockCalibration(c, pGpuTimestamp, pCpuTimestamp)
#define ID3D12CommandQueue_GetDesc(c) c->lpVtbl->GetDesc(c)
#define ID3D12CommandQueue_GetTimestampFrequency(c, pFrequency) c->lpVtbl->GetTimestampFrequency(c, pFrequency)
#define ID3D12CommandQueue_SetMarker(c, Metadata, pData, Size) c->lpVtbl->SetMarker(c, Metadata, pData, Size)
#define ID3D12CommandQueue_Signal(c, pFence, Value) c->lpVtbl->Signal(c, pFence, Value)
#define ID3D12CommandQueue_UpdateTileMappings(c, pResource, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags) c->lpVtbl->UpdateTileMappings(c, pResource, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags)
#define ID3D12CommandQueue_Wait(c, pFence, Value) c->lpVtbl->Wait(c, pFence, Value)
#define ID3D12CommandQueue_GetPrivateData(c, guid, pDataSize, pData) c->lpVtbl->GetPrivateData(c, guid, pDataSize, pData)
#define ID3D12CommandQueue_SetName(c, Name) c->lpVtbl->SetName(c, Name)
#define ID3D12CommandQueue_SetPrivateData(c, guid, DataSize, pData) c->lpVtbl->SetPrivateData(c, guid, DataSize, pData)
#define ID3D12CommandQueue_SetPrivateDataInterface(c, guid, pData) c->lpVtbl->SetPrivateDataInterface(c, guid, pData)
#define ID3D12CommandQueue_AddRef(c) c->lpVtbl->AddRef(c)
#define ID3D12CommandQueue_QueryInterface(c, riid, ppvObject) c->lpVtbl->QueryInterface(c, riid, ppvObject)
#define ID3D12CommandQueue_Release(c) c->lpVtbl->Release(c)
#define ID3D12CommandQueue_GetDevice(c, riid, ppvDevice) c->lpVtbl->GetDevice(c, riid, ppvDevice)

//~ NOTE(milo.h): ID3D12DescriptorHeap
#define ID3D12DescriptorHeap_GetCPUDescriptorHeapHandleForHeapStart(d, RetVal) d->lpVtbl->GetCPUDescriptorHandleForHeapStart(d, RetVal)
#define ID3D12DescriptorHeap_GetDesc(d) d->lpVtbl->GetDesc(d)
#define ID3D12DescriptorHeap_GetGPUDescriptorHandleForHeapStart(d, RetVal) d->lpVtbl->GetGPUDescriptorHandleForHeapStart(d, RetVal)
#define ID3D12DescriptorHeap_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12DescriptorHeap_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12DescriptorHeap_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12DescriptorHeap_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12DescriptorHeap_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12DescriptorHeap_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12DescriptorHeap_Release(d) d->lpVtbl->Release(d)
#define ID3D12DescriptorHeap_GetDevice(d, riid, ppvDevice) d->lpVtbl->GetDevice(c, riid, ppvDevice)

//~ NOTE(milo.h): ID3D12Device
#define ID3D12Device_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h): ID3D12Device1
#define ID3D12Device1_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device1_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device1_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device1_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device1_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device1_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device1_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device1_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device1_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device1_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device1_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device1_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device1_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device1_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device1_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device1_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device1_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device1_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device1_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device1_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device1_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device1_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device1_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device1_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device1_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device1_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device1_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device1_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device1_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device1_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device1_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device1_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device1_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device1_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device1_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device1_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device1_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device1_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device1_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device1_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device1_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device1_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device1_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device1_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device1_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device1_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device1_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h): ID3D12Device2
#define ID3D12Device2_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device2_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device2_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device2_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device2_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device2_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device2_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device2_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device2_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device2_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device2_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device2_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device2_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device2_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device2_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device2_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device2_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device2_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device2_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device2_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device2_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device2_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device2_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device2_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device2_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device2_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device2_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device2_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device2_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device2_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device2_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device2_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device2_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device2_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device2_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device2_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device2_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device2_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device2_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device2_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device2_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device2_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device2_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device2_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device2_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device2_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device2_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device2_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h): ID3D12Device3
#define ID3D12Device3_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device3_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device3_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device3_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device3_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device3_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device3_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device3_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device3_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device3_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device3_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device3_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device3_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device3_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device3_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device3_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device3_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device3_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device3_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device3_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device3_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device3_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device3_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device3_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device3_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device3_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device3_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device3_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device3_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device3_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device3_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device3_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device3_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device3_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device3_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device3_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device3_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device3_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device3_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device3_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device3_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device3_EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal) d->lpVtbl->EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal)
#define ID3D12Device3_OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap)
#define ID3D12Device3_OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap)
#define ID3D12Device3_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device3_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device3_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device3_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device3_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device3_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device3_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h): ID3D12Device4
#define ID3D12Device4_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device4_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device4_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device4_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device4_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device4_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device4_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device4_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device4_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device4_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device4_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device4_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device4_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device4_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device4_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device4_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device4_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device4_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device4_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device4_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device4_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device4_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device4_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device4_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device4_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device4_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device4_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device4_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device4_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device4_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device4_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device4_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device4_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device4_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device4_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device4_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device4_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device4_CreateCommandList1(d, nodeMask, type, flags, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, nodeMask, type, flags, riid, ppCommandList)
#define ID3D12Device4_CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
#define ID3D12Device4_CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap) d->lpVtbl->CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap)
#define ID3D12Device4_CreateProtectedResourceSession(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession(d, pDesc, riid, ppSession)
#define ID3D12Device4_CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device4_GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device4_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device4_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device4_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device4_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device4_EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal) d->lpVtbl->EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal)
#define ID3D12Device4_OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap)
#define ID3D12Device4_OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap)
#define ID3D12Device4_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device4_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device4_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device4_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device4_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device4_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device4_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h) ID3D12Device5
#define ID3D12Device5_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device5_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device5_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device5_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device5_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device5_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device5_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device5_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device5_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device5_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device5_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device5_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device5_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device5_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device5_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device5_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device5_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device5_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device5_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device5_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device5_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device5_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device5_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device5_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device5_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device5_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device5_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device5_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device5_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device5_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device5_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device5_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device5_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device5_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device5_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device5_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device5_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device5_CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck) d->lpVtbl->CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck)
#define ID3D12Device5_CreateLifetimeTracker(d, pOwner, riid, ppvTracker) d->lpVtbl->CreateLifetimeTracker(d, pOwern, riid, ppvTracker)
#define ID3D12Device5_CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand) d->lpVtbl->CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand)
#define ID3D12Device5_CreateStateObject(d, pDesc, riid, ppStateObject) d->lpVtbl->CreateStateObject(d, pDesc, riid, ppStateObject)
#define ID3D12Device5_EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs) d->lpVtbl->EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
#define ID3D12Device5_EnumerateMetaCommands(d, pNumMetaCommands, pDescs) d->lpVtbl->EnumerateMetaCommands(d, pNumMetaCommands, pDescs)
#define ID3D12Device5_GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo) d->lpVtbl->GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo)
#define ID3D12Device5_RemoveDevice(d) d->lpVtbl->RemoveDevice(d)
#define ID3D12Device5_CreateCommandList1(d, nodeMask, type, flags, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, nodeMask, type, flags, riid, ppCommandList)
#define ID3D12Device5_CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
#define ID3D12Device5_CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap) d->lpVtbl->CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap)
#define ID3D12Device5_CreateProtectedResourceSession(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession(d, pDesc, riid, ppSession)
#define ID3D12Device5_CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device5_GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device5_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device5_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device5_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device5_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device5_EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal) d->lpVtbl->EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal)
#define ID3D12Device5_OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap)
#define ID3D12Device5_OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap)
#define ID3D12Device5_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device5_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device5_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device5_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device5_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device5_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device5_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h) ID3D12Device6
#define ID3D12Device6_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device6_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device6_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device6_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device6_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device6_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device6_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device6_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device6_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device6_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device6_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device6_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device6_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device6_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device6_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device6_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device6_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device6_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device6_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device6_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device6_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device6_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device6_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device6_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device6_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device6_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device6_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device6_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device6_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device6_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device6_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device6_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device6_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device6_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device6_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device6_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device6_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device6_SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired) d->lpVtbl->SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired)
#define ID3D12Device6_CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck) d->lpVtbl->CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck)
#define ID3D12Device6_CreateLifetimeTracker(d, pOwner, riid, ppvTracker) d->lpVtbl->CreateLifetimeTracker(d, pOwern, riid, ppvTracker)
#define ID3D12Device6_CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand) d->lpVtbl->CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand)
#define ID3D12Device6_CreateStateObject(d, pDesc, riid, ppStateObject) d->lpVtbl->CreateStateObject(d, pDesc, riid, ppStateObject)
#define ID3D12Device6_EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs) d->lpVtbl->EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
#define ID3D12Device6_EnumerateMetaCommands(d, pNumMetaCommands, pDescs) d->lpVtbl->EnumerateMetaCommands(d, pNumMetaCommands, pDescs)
#define ID3D12Device6_GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo) d->lpVtbl->GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo)
#define ID3D12Device6_RemoveDevice(d) d->lpVtbl->RemoveDevice(d)
#define ID3D12Device6_CreateCommandList1(d, nodeMask, type, flags, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, nodeMask, type, flags, riid, ppCommandList)
#define ID3D12Device6_CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
#define ID3D12Device6_CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap) d->lpVtbl->CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap)
#define ID3D12Device6_CreateProtectedResourceSession(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession(d, pDesc, riid, ppSession)
#define ID3D12Device6_CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device6_GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device6_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device6_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device6_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device6_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device6_EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal) d->lpVtbl->EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal)
#define ID3D12Device6_OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap)
#define ID3D12Device6_OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap)
#define ID3D12Device6_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device6_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device6_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device6_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device6_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device6_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device6_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h) ID3D12Device7
#define ID3D12Device7_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device7_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device7_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device7_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device7_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device7_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device7_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device7_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device7_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device7_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device7_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device7_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device7_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device7_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device7_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device7_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device7_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device7_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device7_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device7_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device7_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device7_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device7_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device7_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device7_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device7_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device7_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device7_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device7_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device7_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device7_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device7_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device7_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device7_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device7_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device7_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device7_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device7_AddToStateObject(d, pAddition, pStateObjectToGrowFrom, ppNewStateObject) d->lpVtbl->AddToStateObject(d, pAddition, pStateObjectToGrowFrom, ppNewStateObject)
#define ID3D12Device7_CreateProtectedResourceSession1(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession1(d, pDesc, riid, ppSession)
#define ID3D12Device7_SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired) d->lpVtbl->SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired)
#define ID3D12Device7_CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck) d->lpVtbl->CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck)
#define ID3D12Device7_CreateLifetimeTracker(d, pOwner, riid, ppvTracker) d->lpVtbl->CreateLifetimeTracker(d, pOwern, riid, ppvTracker)
#define ID3D12Device7_CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand) d->lpVtbl->CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand)
#define ID3D12Device7_CreateStateObject(d, pDesc, riid, ppStateObject) d->lpVtbl->CreateStateObject(d, pDesc, riid, ppStateObject)
#define ID3D12Device7_EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs) d->lpVtbl->EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
#define ID3D12Device7_EnumerateMetaCommands(d, pNumMetaCommands, pDescs) d->lpVtbl->EnumerateMetaCommands(d, pNumMetaCommands, pDescs)
#define ID3D12Device7_GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo) d->lpVtbl->GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo)
#define ID3D12Device7_RemoveDevice(d) d->lpVtbl->RemoveDevice(d)
#define ID3D12Device7_CreateCommandList1(d, nodeMask, type, flags, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, nodeMask, type, flags, riid, ppCommandList)
#define ID3D12Device7_CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
#define ID3D12Device7_CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap) d->lpVtbl->CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap)
#define ID3D12Device7_CreateProtectedResourceSession(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession(d, pDesc, riid, ppSession)
#define ID3D12Device7_CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device7_GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device7_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device7_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device7_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device7_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device7_EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal) d->lpVtbl->EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal)
#define ID3D12Device7_OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap)
#define ID3D12Device7_OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap)
#define ID3D12Device7_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device7_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device7_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device7_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device7_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device7_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device7_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h) ID3D12Device8
#define ID3D12Device8_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device8_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device8_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device8_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device8_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device8_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device8_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device8_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device8_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device8_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device8_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device8_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device8_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device8_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device8_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device8_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device8_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device8_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device8_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device8_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device8_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device8_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device8_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device8_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device8_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device8_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device8_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device8_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device8_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device8_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device8_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device8_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device8_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device8_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device8_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device8_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device8_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device8_CreateCommittedResource2(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateCommittedResource2(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device8_CreatePlacedResource1(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource1(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device8_CreateSamplerFeedbackUnorderedAccessView(d, pTargetedResource, pFeedbackResource, DestDescriptor) d->lpVtbl->CreateSamplerFeedbackUnorderedAccessView(d, pTargetedResource, pFeedbackResource, DestDescriptor)
#define ID3D12Device8_GetCopyableFootprints1(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints1(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device8_GetResourceAllocationInfo2(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo2(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device8_AddToStateObject(d, pAddition, pStateObjectToGrowFrom, ppNewStateObject) d->lpVtbl->AddToStateObject(d, pAddition, pStateObjectToGrowFrom, ppNewStateObject)
#define ID3D12Device8_CreateProtectedResourceSession1(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession1(d, pDesc, riid, ppSession)
#define ID3D12Device8_SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired) d->lpVtbl->SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired)
#define ID3D12Device8_CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck) d->lpVtbl->CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck)
#define ID3D12Device8_CreateLifetimeTracker(d, pOwner, riid, ppvTracker) d->lpVtbl->CreateLifetimeTracker(d, pOwern, riid, ppvTracker)
#define ID3D12Device8_CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand) d->lpVtbl->CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand)
#define ID3D12Device8_CreateStateObject(d, pDesc, riid, ppStateObject) d->lpVtbl->CreateStateObject(d, pDesc, riid, ppStateObject)
#define ID3D12Device8_EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs) d->lpVtbl->EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
#define ID3D12Device8_EnumerateMetaCommands(d, pNumMetaCommands, pDescs) d->lpVtbl->EnumerateMetaCommands(d, pNumMetaCommands, pDescs)
#define ID3D12Device8_GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo) d->lpVtbl->GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo)
#define ID3D12Device8_RemoveDevice(d) d->lpVtbl->RemoveDevice(d)
#define ID3D12Device8_CreateCommandList1(d, nodeMask, type, flags, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, nodeMask, type, flags, riid, ppCommandList)
#define ID3D12Device8_CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
#define ID3D12Device8_CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap) d->lpVtbl->CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap)
#define ID3D12Device8_CreateProtectedResourceSession(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession(d, pDesc, riid, ppSession)
#define ID3D12Device8_CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device8_GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device8_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device8_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device8_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device8_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device8_EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal) d->lpVtbl->EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal)
#define ID3D12Device8_OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap)
#define ID3D12Device8_OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap)
#define ID3D12Device8_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device8_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device8_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device8_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device8_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device8_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device8_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h) ID3D12Device9
#define ID3D12Device9_CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize) d->lpVtbl->CheckFeatureSupport(d, Feature, pFeatureSupportData, FeatureSupportDataSize)
#define ID3D12Device9_CopyDescriptors(d, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType) d->lpVtbl->CopyDescriptors(d, NumDescriptorRanges, pDestDescriptorRangeStarts, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType)
#define ID3D12Device9_CopyDescriptorsSimple(d, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType) d->lpVtbl->CopyDescriptorsSimple(d, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType)
#define ID3D12Device9_CreateCommandAllocator(d, type, riid, ppCommandAllocator) d->lpVtbl->CreateCommandAllocator(d, type, riid, ppCommandAllocator)
#define ID3D12Device9_CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, NodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList)
#define ID3D12Device9_CreateCommandQueue(d, pDesc, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue(d, pDesc, riid, ppCommandQueue)
#define ID3D12Device9_CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature) d->lpVtbl->CreateCommandSignature(d, pDesc, pRootSignature, riid, ppvCommandSignature)
#define ID3D12Device9_CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource(d, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource)
#define ID3D12Device9_CreateComputePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateComputePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device9_CreateConstantBufferView(d, pDesc, DestDescriptor) d->lpVtbl->CreateConstantBufferView(d, pDesc, DestDescriptor)
#define ID3D12Device9_CreateDepthStencilView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateDepthStencilView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device9_CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap) d->lpVtbl->CreateDescriptorHeap(d, pDescriptorHeapDesc, riid, ppvHeap)
#define ID3D12Device9_CreateFence(d, InitialValue, Flags, riid, ppFence) d->lpVtbl->CreateFence(d, InitialValue, Flags, riid, ppFence)
#define ID3D12Device9_CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreateGraphicsPipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device9_CreateHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device9_CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device9_CreateQueryHeap(d, pDesc, riid, ppvHeap) d->lpVtbl->CreateQueryHeap(d, pDesc, riid, ppvHeap)
#define ID3D12Device9_CreateRenderTargetView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateRenderTargetView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device9_CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreateReservedResource(d, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device9_CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature) d->lpVtbl->CreateRootSignature(d, NodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
#define ID3D12Device9_CreateSampler(d, pDesc, DestDescriptor) d->lpVtbl->CreateSampler(d, pDesc, DestDescriptor)
#define ID3D12Device9_CreateShaderResourceView(d, pResource, pDesc, DestDescriptor) d->lpVtbl->CreateShaderResourceView(d, pResource, pDesc, DestDescriptor)
#define ID3D12Device9_CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle) d->lpVtbl->CreateSharedHandle(d, pObject, pAttributes, Access, Name, pHandle)
#define ID3D12Device9_CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor) d->lpVtbl->CreateUnorderedAccessView(d, pResource, pCounterResource, pDesc, DestDescriptor)
#define ID3D12Device9_Evict(d, NumObjets, ppObjects) d->lpVtbl->Evict(d, NumObjects, ppObjects)
#define ID3D12Device9_GetAdapterLuid(d, RetVal) d->lpVtbl->GetAdapterLuid(d, RetVal)
#define ID3D12Device9_GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device9_GetCustomHeapProperties(d, RetVal, NodeMask, HeapType) d->lpVtbl->GetCustomHeapProperties(d, RetVal, NodeMask, HeapType)
#define ID3D12Device9_GetDescriptorHandleIncrementSize(d, DescriptorHeapType) d->lpVtbl->GetDescriptorHandleIncrementSize(d, DescriptorHeapType)
#define ID3D12Device9_GetDeviceRemovedReason(d) d->lpVtbl->GetDeviceRemovedReason(d)
#define ID3D12Device9_GetNodeCount(d) d->lpVtbl->GetNodeCount(d)
#define ID3D12Device9_GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs) d->lpVtbl->GetResourceAllocationInfo(d, RetVal, visibleMask, numResourceDescs, pResourceDescs)
#define ID3D12Device9_GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips) d->lpVtbl->GetResourceTiling(d, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips)
#define ID3D12Device9_MakeResidents(d, NumObjects, ppObjects) d->lpVtbl->MakeResidents(d, NumObjects, ppObjects)
#define ID3D12Device9_OpenSharedHandle(d, NTHandle, riid, ppvObj) d->lpVtbl->OpenSharedHandle(d, NTHandle, riid, ppvObj)
#define ID3D12Device9_OpenSharedHandleByName(d, Name, Access, pNTHandle) d->lpVtbl->OpenSharedHandleByName(d, Name, Access, pNTHandle)
#define ID3D12Device9_SetStablePowerState(d, Enable) d->lpVtbl->SetStablePowerState(d, Enable)
#define ID3D12Device9_CreateCommandQueue1(d, pDesc, CreatorID, riid, ppCommandQueue) d->lpVtbl->CreateCommandQueue1(d, pDesc, CreatorID, riid, ppCommandQueue)
#define ID3D12Device9_CreateShaderCacheSession(d, pDesc, riid, ppvSession) d->lpVtbl->CreateShaderCacheSession(d, pDesc, riid, ppvSession)
#define ID3D12Device9_ShaderCacheControl(d, Kinds, Control) d->lpVtbl->ShaderCacheControl(d, Kinds, Control)
#define ID3D12Device9_CreateCommittedResource2(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateCommittedResource2(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device9_CreatePlacedResource1(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource) d->lpVtbl->CreatePlacedResource1(d, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource)
#define ID3D12Device9_CreateSamplerFeedbackUnorderedAccessView(d, pTargetedResource, pFeedbackResource, DestDescriptor) d->lpVtbl->CreateSamplerFeedbackUnorderedAccessView(d, pTargetedResource, pFeedbackResource, DestDescriptor)
#define ID3D12Device9_GetCopyableFootprints1(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes) d->lpVtbl->GetCopyableFootprints1(d, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
#define ID3D12Device9_GetResourceAllocationInfo2(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo2(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device9_AddToStateObject(d, pAddition, pStateObjectToGrowFrom, ppNewStateObject) d->lpVtbl->AddToStateObject(d, pAddition, pStateObjectToGrowFrom, ppNewStateObject)
#define ID3D12Device9_CreateProtectedResourceSession1(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession1(d, pDesc, riid, ppSession)
#define ID3D12Device9_SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired) d->lpVtbl->SetBackgroundProcessingMode(d, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementDesired)
#define ID3D12Device9_CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck) d->lpVtbl->CheckDriverMatchingIdentifier(d, SerializedDataType, pIdentifierToCheck)
#define ID3D12Device9_CreateLifetimeTracker(d, pOwner, riid, ppvTracker) d->lpVtbl->CreateLifetimeTracker(d, pOwern, riid, ppvTracker)
#define ID3D12Device9_CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand) d->lpVtbl->CreateMetaCommand(d, CommandID, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand)
#define ID3D12Device9_CreateStateObject(d, pDesc, riid, ppStateObject) d->lpVtbl->CreateStateObject(d, pDesc, riid, ppStateObject)
#define ID3D12Device9_EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs) d->lpVtbl->EnumerateMetaCommandParameters(d, CommandID, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
#define ID3D12Device9_EnumerateMetaCommands(d, pNumMetaCommands, pDescs) d->lpVtbl->EnumerateMetaCommands(d, pNumMetaCommands, pDescs)
#define ID3D12Device9_GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo) d->lpVtbl->GetRaytracingAccelerationStructurePrebuildInfo(d, pDesc, pInfo)
#define ID3D12Device9_RemoveDevice(d) d->lpVtbl->RemoveDevice(d)
#define ID3D12Device9_CreateCommandList1(d, nodeMask, type, flags, riid, ppCommandList) d->lpVtbl->CreateCommandList(d, nodeMask, type, flags, riid, ppCommandList)
#define ID3D12Device9_CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource) d->lpVtbl->CreateCommittedResource1(d, pHeapProperties, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
#define ID3D12Device9_CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap) d->lpVtbl->CreateHeap1(d, pDesc, pProtectedSession, riid, ppvHeap)
#define ID3D12Device9_CreateProtectedResourceSession(d, pDesc, riid, ppSession) d->lpVtbl->CreateProtectedResourceSession(d, pDesc, riid, ppSession)
#define ID3D12Device9_CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource) d->lpVtbl->CreateReservedResource1(d, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
#define ID3D12Device9_GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1) d->lpVtbl->GetResourceAllocationInfo1(d, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
#define ID3D12Device9_CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary) d->lpVtbl->CreatePipelineLibrary(d, pLibraryBlob, BlobLength, riid, ppPipelineLibrary)
#define ID3D12Device9_SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent) d->lpVtbl->SetEventOnMultipleFenceCompletion(d, ppFences, pFenceValues, NumFences, Flags, hEvent)
#define ID3D12Device9_SetResidencyPriority(d, NumObjects, ppObjects, pPriorities) d->lpVtbl->SetResidencyPriority(d, NumObjects, ppObjects, pPriorities)
#define ID3D12Device9_CreatePipelineState(d, pDesc, riid, ppPipelineState) d->lpVtbl->CreatePipelineState(d, pDesc, riid, ppPipelineState)
#define ID3D12Device9_EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal) d->lpVtbl->EnqueueMakeResident(d, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal)
#define ID3D12Device9_OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromAddress(d, pAddress, riid, ppvHeap)
#define ID3D12Device9_OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap) d->lpVtbl->OpenExistingHeapFromFileMapping(d, hFileMapping, riid, ppvHeap)
#define ID3D12Device9_GetPrivateData(d, guid, pDataSize, pData) d->lpVtbl->GetPrivateData(d, guid, pDataSize, pData)
#define ID3D12Device9_SetName(d, Name) d->lpVtbl->SetName(d, Name)
#define ID3D12Device9_SetPrivateData(d, guid, DataSize, pData) d->lpVtbl->SetPrivateData(d, guid, DataSize, pData)
#define ID3D12Device9_SetPrivateDataInterface(d, guid, pData) d->lpVtbl->SetPrivateDataInterface(d, guid, pData)
#define ID3D12Device9_AddRef(d) d->lpVtbl->AddRef(d)
#define ID3D12Device9_QueryInterface(d, riid, ppvObject) d->lpVtbl->QueryInterface(d, riid, ppvObject)
#define ID3D12Device9_Release(d) d->lpVtbl->Release(d)

//~ NOTE(milo.h): ID3D12Resource
#define ID3D12Resource_Release(Resource) Resource->lpVtbl->Release(Resource)

//~ NOTE(milo.h): ID3D12Fence
#define ID3D12Fence_Signal(Fence, FenceValue) Fence->lpVtbl->Signal(Fence, FenceValue)
#define ID3D12Fence_GetCompletedValue(Fence) Fence->lpVtbl->GetCompletedValue(Fence)
#define ID3D12Fence_SetEventOnCompletion(Fence, Value, Event) Fence->lpVtbl->SetEventOnCompletion(Fence, Value, Event)

/* D3D12 */
// TODO(milo.h): ID3D12DeviceRemovedExtendedData(IUnknown)
// TODO(milo.h): ID3D12DeviceRemovedExtendedDataSettings(IUnknown)
// TODO(milo.h): ID3D12Fence1(ID3D12Fence)
// TODO(milo.h): ID3D12GraphicsCommandList(ID3D12CommandList)
// TODO(milo.h): ID3D12GraphicsCommandList1(ID3D12GraphicsCommandList)
// TODO(milo.h): ID3D12GraphicsCommandList2(ID3D12GraphicsCommandList1)
// TODO(milo.h): ID3D12GraphicsCommandList3(ID3D12GraphicsCommandList2)
// TODO(milo.h): ID3D12GraphicsCommandList4(ID3D12GraphicsCommandList3)
// TODO(milo.h): ID3D12GraphicsCommandList5(ID3D12GraphicsCommandList4)
// TODO(milo.h): ID3D12Heap(ID3D12Pageable)
// TODO(milo.h); ID3D12LifetimeOwner(IUnknown)
// TODO(milo.h): ID3D12LifetimeTracker(ID3D12Pageable)
// TODO(milo.h): ID3D12MetaCommand(ID3D12Pageable)
// TODO(milo.h): ID3D12PipelineLibrary(ID3D12DeviceChild)
// TODO(milo.h): ID3D12PipelineLibrary1(ID3D12PipelineLibrary1)
// TODO(milo.h): ID3D12PipelineState(ID3D12Pageable)
// TODO(milo.h): ID3D12ProtectedResourceSession(ID3D12ProtectedSession)
// TODO(milo.h): ID3D12ProtectedResourceSession1(ID3D12ProtectedResourceSession)
// TODO(milo.h): ID3D12ProtectedSession(ID3D12DeviceChild)
// TODO(milo.h): ID3D12RootSignatureDeserializer(IUnknown)
// TODO(milo.h): ID3D12SDKConfiguration(IUnknown)
// TODO(milo.h): ID3D12ShaderCacheSession(ID3D12DeviceChild)
// TODO(milo.h): ID3D12StateObject(ID3D12Pageable)
// TODO(milo.h): ID3D12StateObjectProperties(IUnknown)
// TODO(milo.h): ID3D12Tools(IUnknown)
// TODO(milo.h): ID3D12VersionedRootSignatureDeserializer(IUnknown)
/* D3D12 */

//~ NOTE(milo.h): ID3D12Debug1
#define ID3D12Debug1_EnableDebugLayer(Debug) Debug->lpVtbl->EnableDebugLayer(Debug)
#define ID3D12Debug1_Release(Debug) Debug->lpVtbl->Release(Debug)

//~ NOTE(milo.h): ID3D12InfoQueue
#define ID3D12InfoQueue_SetBreakOnSeverity(InfoQueue, MessageSeverity, Enable) InfoQueue->lpVtbl->SetBreakOnSeverity(InfoQueue, MessageSeverity, Enable)
#define ID3D12InfoQueue_PushStorageFilter(InfoQueue, Filter) InfoQueue->lpVtbl->PushStorageFilter(InfoQueue, Filter)
#define ID3D12InfoQueue_Release(InfoQueue) InfoQueue->lpVtbl->Release(InfoQueue)

//~ NOTE(milo.h): ID3D12DebugDevice
#define ID3D12DebugDevice_ReportLiveDeviceObjects(DebugDevice, Flags) DebugDevice->lpVtbl->ReportLiveDeviceObjects(DebugDevice, Flags)

/* D3D12 DEBUG */
// TODO(milo.h): ID3D12Debug(IUnknown)
// TODO(milo.h): ID3D12Debug2(ID3D12Debug1)
// TODO(milo.h): ID3D12Debug3(ID3D12Debug2)
// TODO(milo.h): ID3D12Debug4(ID3D12Debug3)
// TODO(milo.h): ID3D12Debug5(ID3D12Debug4)
// TODO(milo.h): ID3D12DebugCommandList(IUnknown)
// TODO(milo.h): ID3D12DebugCommandList1(IUnknown)
// TODO(milo.h): ID3D12DebugCommandQueue(IUnknown)
// TODO(milo.h): ID3D12DebugDevice(IUnknown)
// TODO(milo.h): ID3D12DebugDevice1(IUnknown)
// TODO(milo.h): ID3D12SharingContract(IUnknown)
/* D3D12 DEBUG */

/* D3D12 SHADER */
// TODO(milo.h): ID3D12FunctionParameterReflection
// TODO(milo.h): ID3D12FunctionReflection
// TODO(milo.h): ID3D12LibraryReflection
// TODO(milo.h): ID3D12ShaderReflection
// TODO(milo.h): ID3D12ShaderReflectionConstantBuffer
// TODO(milo.h): ID3D12ShaderReflectionType
// TODO(milo.h): ID3D12ShaderReflectionVariable
/* D3D12 SHADER */

/* D3D12 Holographic Interop */
// TODO(milo.h): IHolographicCameraInterop(IInspectable)
// TODO(milo.h): IHolographicCameraRenderingParametersInterop(IInspectable)
// TODO(milo.h): IHolographicQuadLayerInterop(IInspectable)
// TODO(milo.h): IHolographicQuadLayerUpdateParametersInterop(IInspectable)
/* D3D12 Holographic Interop */

/* D3D11 on 12 */
// TODO(milo.h): ID3D11On12Device(IUnknown)
// TODO(milo.h): ID3D11On12Device1(ID3D11On12Device)
// TODO(milo.h): ID3D11On12Device2(ID3D11On12Device1)
/* D3D12 on 12 */

//~ NOTE(milo.h): IDXGIFactory3
#define IDXGIFactory3_EnumAdapters(Factory, Index, Adapter) Factory->lpVtbl->EnumAdapters(Factory, Index, Adapter)
#define IDXGIFactory3_CreateSwapChainForHwnd(Factory, pUnknown, Hwnd, pDesc, idk, idk1, ppvSwapChain) Factory->lpVtbl->CreateSwapChainForHwnd(Factory, pUnknown, Hwnd, pDesc, idk, idk1, ppvSwapChain)

//~ NOTE(milo.h): IDXGIAdapter
#define IDXGIAdapter_GetParent(Adapter, riid, ppvParent) Adapter->lpVtbl->GetParent(Adapter, riid, ppvParent)

//~ NOTE(milo.h) IDXGISwapChain1
#define IDXGISwapChain1_QueryInterface(SwapChain, riid, ppvInterface) SwapChain->lpVtbl->QueryInterface(SwapChain, riid, ppvInterface)
#define IDXGISwapChain1_Release(SwapChain) SwapChain->lpVtbl->Release(SwapChain)

//~ NOTE(milo.h): IDXGISwapChain3
#define IDXGISwapChain3_GetBuffer(SwapChain, BufferIndex, riid, ppvBuffer) SwapChain->lpVtbl->GetBuffer(SwapChain, BufferIndex, riid, ppvBuffer)
#define IDXGISwapChain3_GetDesc1(SwapChain, Desc) SwapChain->GetDesc1(SwapChain, Desc)
#define IDXGISwapChain3_ResizeBuffers(SwapChain, BufferCount, Width, Height, Format, Flags) SwapChain->ResizeBuffers(SwapChain, BufferCount, Width, Height, Format, Flags)
#define IDXGISwapChain3_GetCurrentBackBufferIndex(SwapChain) SwapChain->lpVtbl->GetCurrentBackBufferIndex(D3D12.SwapChain)

/* DXGI */
// TODO(milo.h): IDXGIAdapter(IDXGIObject)
// TODO(milo.h): IDXGIAdapter1(IDXGIAdapter)
// TODO(milo.h): IDXGIDevice(IDXGIObject)
// TODO(milo.h): IDXGIDevice1(IDXGIDevice)
// TODO(milo.h): IDXGIDeviceSubObject(IDXGIObject)
// TODO(milo.h): IDXGIFactory(IDXGIObject)
// TODO(milo.h): IDXGIFactory1(IDXGIFactory)
// TODO(milo.h): IDXGIKeyedMutex(IDXGIDeviceSubObject)
// TODO(milo.h): IDXGIObject(IUnknown)
// TODO(milo.h): IDXGIOutput(IDXGIObject)
// TODO(milo.h): IDXGIResource(IDXGIDeviceSubObject)
// TODO(milo.h): IDXGISurface(IDXGIDeviceSubObject)
// TODO(milo.h): IDXGISurface1(IDXGISurface)
// TODO(milo.h): IDXGISwapChain(IDXGIDeviceSubObject)
// TODO(milo.h): IDXGIAdapter2(IDXGIAdapter1)
// TODO(milo.h): IDXGIDevice2(IDXGIDevice1)
// TODO(milo.h): IDXGIDisplayControl(IUnknown)
// TODO(milo.h): IDXGIFactory2(IDXGIFactory1)
// TODO(milo.h): IDXGIOutput1(IDXGIOutput)
// TODO(milo.h): IDXGIOutputDuplication(IDXGIObject)
// TODO(milo.h): IDXGIResource1(IDXGIResource)
// TODO(milo.h): IDXGISurface2(IDXGISurface)
// TODO(milo.h): IDXGISwapChain1(IDXGISwapChain)
// TODO(milo.h): IDXGIDecodeSwapChain(IUnknwon)
// TODO(milo.h): IDXGIDevice3(IDXGIDevice2)
// TODO(milo.h): IDXGIFactory3(IDXGIFactory2)
// TODO(milo.h): IDXGIFactoryMedia(IUnknown)
// TODO(milo.h): IDXGIOutput2(IDXGIOutput1)
// TODO(milo.h): IDXGIOutput3(IDXGIOutput2)
// TODO(milo.h): IDXGISwapChain2(IDXGISwapChain1)
// TODO(milo.h): IDXGISwapChainMedia(IUnknown)
// TODO(milo.h): IDXGIAdapter3(IDXGIAdapter2)
// TODO(milo.h): IDXGIFactory4(IDXGIFactory3)
// TODO(milo.h): IDXGIOutput4(IDXGIOutput3)
// TODO(milo.h): IDXGISwapChain3(IDXGISwapChain2)
// TODO(milo.h): IDXGIDevice4(IDXGIDevice3)
// TODO(milo.h): IDXGIFactory5(IDXGIFactory4)
// TODO(milo.h): IDXGIOutput5(IDXGIOutput4)
// TODO(milo.h): IDXGISwapChain4(IDXGISwapChain3)
// TODO(milo.h): IDXGIAdapter4(IDXGIAdapter3)
// TODO(milo.h): IDXGIFactory6(IDXGIFactory5)
// TODO(milo.h): IDXGIFactory7(IDXGIFactory6)
// TODO(milo.h): IDXGIOutput6(IDXGIOutput5)
// TODO(milo.h): IDXGIDebug(IUnknown)
// TODO(milo.h): IDXGIDebug1(IDXGIDebug)
// TODO(milo.h): IDXGIInfoQueue(IUnknown)
/* DXGI */

#endif